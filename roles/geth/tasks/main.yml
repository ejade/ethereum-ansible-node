---
- name: Install dependencies
  ansible.builtin.apt:
    name:
      - curl
      - gnupg
      - lsb-release
      - ca-certificates
      - software-properties-common
      - openssl
      - wget
      - jq
    state: present

- name: Create execution group
  ansible.builtin.group:
    name: "{{ execution_group }}"
    state: present
    system: true


- name: Create execution user
  ansible.builtin.user:
    name: "{{ execution_user }}"
    group: "{{ execution_group }}"
    shell: /bin/false
    system: true
    create_home: false

- name: Create secrets directory
  ansible.builtin.file:
    path: /secrets
    state: directory
    mode: "0755"
    owner: root
    group: root

- name: Create JWT secret file
  ansible.builtin.shell: |
    openssl rand -hex 32 | tr -d "\n" > /secrets/jwtsecret
  args:
    creates: /secrets/jwtsecret

- name: Set JWT secret file permissions
  ansible.builtin.file:
    path: /secrets/jwtsecret
    mode: "0644"
    owner: root
    group: root

- name: Create execution directories
  ansible.builtin.file:
    path: "{{ execution_dir }}"
    state: directory
    owner: "{{ execution_user }}"
    group: "{{ execution_group }}"
    mode: "0755"

- name: Check if execution client (Geth) is installed
  ansible.builtin.shell: /usr/local/bin/geth version | grep ^Version | awk '{print $2}'
  register: geth_version
  changed_when: false
  failed_when: false
  when: execution_client == 'geth'


- name: Get latest Geth version info
  when: execution_client == 'geth'
  block:
    - name: Get latest Geth download URL
      ansible.builtin.shell: |
        RELEASE_URL="https://geth.ethereum.org/downloads"
        FILE="https://gethstore.blob.core.windows.net/builds/geth-linux-amd64[a-zA-Z0-9./?=_%:-]*.tar.gz"
        curl -s $RELEASE_URL | grep -Eo $FILE | head -1
      register: geth_url
      args:
        executable: /bin/bash

    - name: Extract version from download URL
      ansible.builtin.set_fact:
        latest_geth_version: "{{ geth_url.stdout | regex_replace('.*geth-linux-amd64-(.+)\\.tar\\.gz', '\\1') }}"

    - name: Display version comparison
      ansible.builtin.debug:
        msg:
          - "{{ '=' * 60 }}"
          - "{{ ' ' * 20 }}ðŸš€ GETH VERSION CHECK {{ ' ' * 20 }}"
          - "{{ '=' * 60 }}"
          - "ðŸ“¦ Currently installed: {{ geth_version.stdout | default('Not installed') }}"
          - "ðŸ†• Latest available: {{ latest_geth_version }}"
          - "{{ '=' * 60 }}"

- name: Install or upgrade Geth
  when:
    - execution_client == 'geth'
    - geth_version.stdout is not defined or geth_version.stdout != latest_geth_version
  block:
    - name: Stop execution service if running
      ansible.builtin.systemd:
        name: execution
        state: stopped
      ignore_errors: true

    - name: Download Geth binary
      ansible.builtin.get_url:
        url: "{{ geth_url.stdout }}"
        dest: /tmp/geth.tar.gz
        mode: "0644"

    - name: Create temporary directory for Geth extraction
      ansible.builtin.file:
        path: /tmp/geth-extract
        state: directory
        mode: "0755"

    - name: Extract Geth binary
      ansible.builtin.unarchive:
        src: /tmp/geth.tar.gz
        dest: /tmp/geth-extract
        remote_src: true

    - name: Find Geth binary in extracted folder
      ansible.builtin.find:
        paths: /tmp/geth-extract
        patterns: geth
        recurse: true
      register: geth_binary

    - name: Backup existing Geth binary
      ansible.builtin.copy:
        src: /usr/local/bin/geth
        dest: /usr/local/bin/geth.backup
        remote_src: true
        mode: "0755"
      when: geth_version.stdout is defined
      ignore_errors: true

    - name: Copy Geth binary to /usr/local/bin
      ansible.builtin.copy:
        src: "{{ geth_binary.files[0].path }}"
        dest: /usr/local/bin/geth
        mode: "0755"
        remote_src: true
        owner: "{{ execution_user }}"
        group: "{{ execution_group }}"

    - name: Verify new Geth version
      ansible.builtin.shell: /usr/local/bin/geth version | grep ^Version | awk '{print $2}'
      register: new_geth_version
      changed_when: false

    - name: Display upgrade result
      ansible.builtin.debug:
        msg:
          - "{{ '=' * 60 }}"
          - "{{ ' ' * 20 }}âœ… GETH UPGRADE COMPLETE {{ ' ' * 20 }}"
          - "{{ '=' * 60 }}"
          - "ðŸ“¦ Previous version: {{ geth_version.stdout | default('None') }}"
          - "ðŸ†• New version: {{ new_geth_version.stdout }}"
          - "{{ '=' * 60 }}"

    - name: Clean up temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/geth.tar.gz
        - /tmp/geth-extract

    - name: Remove backup file
      ansible.builtin.file:
        path: /usr/local/bin/geth.backup
        state: absent
      when: new_geth_version.stdout == latest_geth_version


- name: Create systemd service for execution client
  ansible.builtin.template:
    src: execution.service.j2
    dest: /etc/systemd/system/execution.service
    mode: "0644"


- name: Set ownership of systemd execution service
  ansible.builtin.file:
    path: "/etc/systemd/system/execution.service"
    owner: root
    group: root
    mode: "0644"

- name: Enable and start Ethereum services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  loop:
    - "execution"
  when: item is defined and item != ""

- name: Check Versions
  import_tasks: version.yml
  tags: [version_check]

- name: Check Status
  import_tasks: check_status.yml
  tags: [status_check]
