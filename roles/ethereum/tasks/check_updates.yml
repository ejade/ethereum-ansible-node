---
# Check for Geth updates
- name: Check for Geth updates
  when: execution_client == 'geth'
  block:
    - name: Get latest Geth version from download page
      ansible.builtin.shell: |
        RELEASE_URL="https://geth.ethereum.org/downloads"
        VERSION=$(curl -s $RELEASE_URL | grep -o "geth-linux-amd64-[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1 | sed 's/geth-linux-amd64-//')
        echo $VERSION
      register: latest_geth_version
      changed_when: false
      failed_when: false

    - name: Compare installed and latest Geth versions
      ansible.builtin.debug:
        msg: |
          Installed Geth version: {{ execution_client_version.stdout | default('Not installed') }}
          Latest available version: {{ latest_geth_version.stdout | default('Unknown') }}
          {% if execution_client_version.stdout is defined and latest_geth_version.stdout is defined and execution_client_version.stdout != latest_geth_version.stdout %}
          Update available: Yes
          {% else %}
          Update available: No
          {% endif %}

# Check for Reth updates
- name: Check for Reth updates
  when: execution_client == 'reth'
  block:
    - name: Get latest Reth version from GitHub
      ansible.builtin.uri:
        url: https://api.github.com/repos/paradigmxyz/reth/releases/latest
        return_content: true
      register: reth_releases
      failed_when: false
      changed_when: false

    - name: Compare installed and latest Reth versions
      ansible.builtin.debug:
        msg: |
          Installed Reth version: {{ execution_client_version.stdout | default('Not installed') }}
          Latest available version: {{ reth_releases.json.tag_name | default('Unknown') | regex_replace('^v', '') }}
          {% if execution_client_version.stdout is defined and reth_releases.json.tag_name is defined and execution_client_version.stdout != reth_releases.json.tag_name | regex_replace('^v', '') %}
          Update available: Yes
          {% else %}
          Update available: No
          {% endif %}

# Check for Lighthouse updates
- name: Check for Lighthouse updates
  when: consensus_client == 'lighthouse'
  block:
    - name: Get latest Lighthouse version from GitHub
      ansible.builtin.uri:
        url: https://api.github.com/repos/sigp/lighthouse/releases/latest
        return_content: true
      register: lighthouse_releases
      failed_when: false
      changed_when: false

    - name: Compare installed and latest Lighthouse versions
      ansible.builtin.debug:
        msg: |
          Installed Lighthouse version: {{ consensus_client_version.stdout | default('Not installed') }}
          Latest available version: {{ lighthouse_releases.json.tag_name | default('Unknown') | regex_replace('^v', '') }}
          {% if consensus_client_version.stdout is defined and lighthouse_releases.json.tag_name is defined and consensus_client_version.stdout != lighthouse_releases.json.tag_name | regex_replace('^v', '') %}
          Update available: Yes
          {% else %}
          Update available: No
          {% endif %} 